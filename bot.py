import time
import requests
import cloudscraper
from bs4 import BeautifulSoup
from datetime import datetime, timedelta
import os

# –°–ø–∏—Å–æ–∫ URL eBay –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
EBAY_URLS = [
    "https://www.ebay.com/sch/i.html?_udlo=100&_nkw=garmin+astro+320+&_sacat=0&_stpos=19720&_fcid=1",
]

# Telegram —Ç–æ–∫–µ–Ω –∏ chat_id
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_IDS = os.getenv("CHAT_ID", "").split(",")

# –ü—Ä–æ–∫—Å–∏ (–Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)
raw_proxies = os.getenv("PROXIES", "")
proxy_list = [p.strip() for p in raw_proxies.split(",") if p.strip()]
current_proxy_index = 0

def get_current_proxy():
    if not proxy_list:
        return None
    return {"http": proxy_list[current_proxy_index], "https": proxy_list[current_proxy_index]}

# –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã
CHECK_INTERVAL = 180           # –æ–±—ã—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: 3 –º–∏–Ω—É—Ç—ã
REPORT_INTERVAL = 1800         # –æ—Ç—á—ë—Ç: 30 –º–∏–Ω—É—Ç
ERROR_NOTIFY_INTERVAL = 1800   # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö —Ä–∞–∑ –≤ 30 –º–∏–Ω—É—Ç
ERROR_THRESHOLD = 3            # —Å–∫–æ–ª—å–∫–æ –æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥ ‚Üí –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–∫—Å–∏
EXTENDED_INTERVAL = 900        # –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç

# –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
seen_items = {url: set() for url in EBAY_URLS}
last_error_time = datetime.min
last_report_time = datetime.now()
checks_count = 0
new_items_count = 0
fail_counter = 0
current_interval = CHECK_INTERVAL

HEADERS = {
    "User-Agent": ("Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
                   "AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123 Safari/537.36")
}

def switch_proxy():
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–∫—Å–∏"""
    global current_proxy_index, fail_counter
    if not proxy_list:
        return
    current_proxy_index = (current_proxy_index + 1) % len(proxy_list)
    fail_counter = 0
    send_telegram_message(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–∫—Å–∏: {proxy_list[current_proxy_index]}")

def fetch_listings(url):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É eBay –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π"""
    global fail_counter
    proxies = get_current_proxy()
    try:
        resp = requests.get(url, headers=HEADERS, proxies=proxies, timeout=(15, 120))
        resp.raise_for_status()
        fail_counter = 0
    except Exception as e:
        fail_counter += 1
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ requests: {e} (–ø–æ–ø—ã—Ç–∫–∞ {fail_counter})")
        if fail_counter >= 2:
            try:
                print("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ CloudScraper...")
                scraper = cloudscraper.create_scraper(browser={"browser": "chrome", "platform": "windows"})
                resp = scraper.get(url, headers=HEADERS, proxies=proxies, timeout=(15, 120))
                resp.raise_for_status()
                fail_counter = 0
            except Exception as e2:
                print(f"‚ùå –û—à–∏–±–∫–∞ –¥–∞–∂–µ —á–µ—Ä–µ–∑ CloudScraper: {e2}")
                raise
        else:
            raise

    soup = BeautifulSoup(resp.text, "html.parser")
    items = []
    for card in soup.select(".s-item"):
        title_tag = card.select_one(".s-item__title")
        price_tag = card.select_one(".s-item__price")
        link_tag  = card.select_one(".s-item__link")
        if not title_tag or not price_tag or not link_tag:
            continue
        title = title_tag.get_text(strip=True)
        price = price_tag.get_text(strip=True)
        link  = link_tag.get("href", "")
        item_id = link.split("/")[-1].split("?")[0] or link
        items.append({"id": item_id, "title": title, "price": price, "link": link})
    return items

def send_telegram_message(message):
    proxies = get_current_proxy()
    if not BOT_TOKEN:
        print("‚ö†Ô∏è BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É.")
        return
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    for raw_id in CHAT_IDS:
        chat_id = raw_id.strip()
        if not chat_id:
            continue
        try:
            r = requests.post(url, data={"chat_id": chat_id, "text": message}, timeout=15, proxies=proxies)
            if r.status_code != 200:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram ({chat_id}): {r.text}")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram ({chat_id}): {e}")

print(f"üì¢ eBay –±–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ {CHECK_INTERVAL} —Å–µ–∫. –ü—Ä–æ–∫—Å–∏: {proxy_list or '‚ùå –Ω–µ—Ç'}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è (—Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è)
for url in EBAY_URLS:
    try:
        listings = fetch_listings(url)
        for item in listings:
            seen_items[url].add(item["id"])
        print(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(listings)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å {url}")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ {url}: {e}")

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
while True:
    checks_count += 1
    for url in EBAY_URLS:
        try:
            listings = fetch_listings(url)
            for item in listings:
                if item["id"] not in seen_items[url]:
                    seen_items[url].add(item["id"])
                    new_items_count += 1
                    msg = (
                        "üÜï –ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–∞ eBay!\n"
                        f"üìå {item['title']}\n"
                        f"üí≤ {item['price']}\n"
                        f"üîó {item['link']}"
                    )
                    send_telegram_message(msg)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {url}: {e}")
            if datetime.now() - last_error_time > timedelta(seconds=ERROR_NOTIFY_INTERVAL):
                send_telegram_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {url}: {e}")
                last_error_time = datetime.now()

    # –ï—Å–ª–∏ –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥ ‚Üí –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –ø—Ä–æ–∫—Å–∏ –∏–ª–∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
    if fail_counter >= ERROR_THRESHOLD:
        if proxy_list:
            switch_proxy()
        else:
            if current_interval != EXTENDED_INTERVAL:
                current_interval = EXTENDED_INTERVAL
                send_telegram_message(f"‚ö†Ô∏è –ú–Ω–æ–≥–æ –æ—à–∏–±–æ–∫. –£–≤–µ–ª–∏—á–∏–≤–∞—é –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ {current_interval} —Å–µ–∫.")
    else:
        if current_interval != CHECK_INTERVAL:
            current_interval = CHECK_INTERVAL
            send_telegram_message(f"‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ò–Ω—Ç–µ—Ä–≤–∞–ª {current_interval} —Å–µ–∫.")

    # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –æ—Ç—á—ë—Ç
    if datetime.now() - last_report_time > timedelta(seconds=REPORT_INTERVAL):
        current_proxy = proxy_list[current_proxy_index] if proxy_list else "‚ùå –Ω–µ—Ç"
        report = (
            "üìä –û—Ç—á—ë—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –º–∏–Ω—É—Ç\n"
            f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
            f"üîé –ü—Ä–æ–≤–µ—Ä–æ–∫: {checks_count}\n"
            f"üÜï –ù–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {new_items_count}\n"
            f"‚ö†Ô∏è –û—à–∏–±–∫–∏ –ø–æ–¥—Ä—è–¥: {fail_counter}\n"
            f"‚è± –¢–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {current_interval} —Å–µ–∫\n"
            f"üåê –ü—Ä–æ–∫—Å–∏: {current_proxy}\n"
            "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç"
        )
        send_telegram_message(report)
        last_report_time = datetime.now()
        checks_count = 0
        new_items_count = 0

    time.sleep(current_interval)
