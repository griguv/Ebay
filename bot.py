import time
import requests
from bs4 import BeautifulSoup
from datetime import datetime, timedelta
import os

# –°–ø–∏—Å–æ–∫ URL eBay –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
EBAY_URLS = [
    "https://www.ebay.com/sch/i.html?_udlo=100&_nkw=garmin+astro+320+&_sacat=0&_stpos=19720&_fcid=1",
]

# Telegram —Ç–æ–∫–µ–Ω –∏ chat_id
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_IDS = os.getenv("CHAT_ID", "").split(",")

# –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã
BASE_CHECK_INTERVAL = 180       # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 3 –º–∏–Ω—É—Ç—ã
REPORT_INTERVAL = 1800          # –æ—Ç—á—ë—Ç –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
ERROR_NOTIFY_INTERVAL = 1800    # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–∞—Ö –Ω–µ —á–∞—â–µ 30 –º–∏–Ω—É—Ç

# –†–µ—Ç—Ä–∞–π-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã
MAX_RETRIES = 3
BACKOFF_FACTOR = 2

# –ü—Ä–æ–∫—Å–∏ (–æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –¥–ª—è eBay –∏ Telegram)
PROXY_URL = os.getenv("PROXY")  # –Ω–∞–ø—Ä–∏–º–µ—Ä: http://user:pass@ip:port
PROXIES = {"http": PROXY_URL, "https": PROXY_URL} if PROXY_URL else None

# –•—Ä–∞–Ω–∏–ª–∏—â–µ
seen_items = {url: set() for url in EBAY_URLS}
error_streaks = {url: 0 for url in EBAY_URLS}
last_error_time = datetime.min
last_report_time = datetime.now()
checks_count = 0
new_items_count = 0
current_check_interval = BASE_CHECK_INTERVAL

HEADERS = {
    "User-Agent": ("Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
                   "AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122 Safari/537.36"),
    "Cache-Control": "no-cache",
    "Pragma": "no-cache",
}

def now_str():
    return datetime.now().strftime("%Y-%m-%d %H:%M:%S")

def fetch_listings(url):
    last_exception = None
    for attempt in range(1, MAX_RETRIES + 1):
        try:
            kwargs = {"headers": HEADERS, "timeout": (10, 60)}
            if PROXIES:
                kwargs["proxies"] = PROXIES
            resp = requests.get(url, **kwargs)
            resp.raise_for_status()
            return parse_listings(resp.text)
        except requests.exceptions.RequestException as e:
            last_exception = e
            print(f"[{now_str()}] ‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {url} (–ø–æ–ø—ã—Ç–∫–∞ {attempt}/{MAX_RETRIES}): {e}")
            if attempt < MAX_RETRIES:
                sleep_for = BACKOFF_FACTOR ** attempt
                print(f"[{now_str()}] –ñ–¥—É {sleep_for}s –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                time.sleep(sleep_for)
    raise last_exception

def parse_listings(html):
    soup = BeautifulSoup(html, "html.parser")
    items = []
    for card in soup.select(".s-item"):
        title_tag = card.select_one(".s-item__title")
        price_tag = card.select_one(".s-item__price")
        link_tag  = card.select_one(".s-item__link")
        if not title_tag or not price_tag or not link_tag:
            continue
        title = title_tag.get_text(strip=True)
        price = price_tag.get_text(strip=True)
        link  = link_tag.get("href", "")
        item_id = link.split("/")[-1].split("?")[0] or link
        items.append({"id": item_id, "title": title, "price": price, "link": link})
    return items

def send_telegram_message(message):
    if not BOT_TOKEN:
        print(f"[{now_str()}] ‚ö† BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")
        return
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    for raw_id in CHAT_IDS:
        chat_id = raw_id.strip()
        if not chat_id:
            continue
        try:
            kwargs = {"data": {"chat_id": chat_id, "text": message}, "timeout": (10, 60)}
            if PROXIES:
                kwargs["proxies"] = PROXIES
            r = requests.post(url, **kwargs)
            if r.status_code != 200:
                print(f"[{now_str()}] ‚ö† –û—à–∏–±–∫–∞ Telegram ({chat_id}): {r.text}")
        except Exception as e:
            print(f"[{now_str()}] ‚ö† –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ Telegram ({chat_id}): {e}")

print(f"[{now_str()}] üì¢ eBay –±–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ë–∞–∑–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {BASE_CHECK_INTERVAL} —Å–µ–∫.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
for url in EBAY_URLS:
    try:
        listings = fetch_listings(url)
        for item in listings:
            seen_items[url].add(item["id"])
        print(f"[{now_str()}] ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {len(listings)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å {url}")
    except Exception as e:
        print(f"[{now_str()}] ‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ {url}: {e}")

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
while True:
    checks_count += 1
    success = True

    for url in EBAY_URLS:
        try:
            listings = fetch_listings(url)
            error_streaks[url] = 0
            for item in listings:
                if item["id"] not in seen_items[url]:
                    seen_items[url].add(item["id"])
                    new_items_count += 1
                    msg = (
                        "üÜï –ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–∞ eBay!\n"
                        f"üìå {item['title']}\n"
                        f"üí≤ {item['price']}\n"
                        f"üîó {item['link']}"
                    )
                    send_telegram_message(msg)
        except Exception as e:
            success = False
            error_streaks[url] += 1
            print(f"[{now_str()}] ‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {url}: {e} (–ø–æ–¥—Ä—è–¥ {error_streaks[url]})")
            if datetime.now() - last_error_time > timedelta(seconds=ERROR_NOTIFY_INTERVAL):
                send_telegram_message(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {url}: {e}")
                last_error_time = datetime.now()

    # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
    if any(streak >= 3 for streak in error_streaks.values()):
        current_check_interval = BASE_CHECK_INTERVAL * 3
        print(f"[{now_str()}] ‚è∏ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥ ‚Äî —É–≤–µ–ª–∏—á–∏–≤–∞—é –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ {current_check_interval} —Å–µ–∫.")
    elif success:
        if current_check_interval != BASE_CHECK_INTERVAL:
            print(f"[{now_str()}] ‚úÖ –£—Å–ø–µ—à–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞—é –∏–Ω—Ç–µ—Ä–≤–∞–ª –∫ {BASE_CHECK_INTERVAL} —Å–µ–∫.")
        current_check_interval = BASE_CHECK_INTERVAL

    # –û—Ç—á—ë—Ç –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
    if datetime.now() - last_report_time > timedelta(seconds=REPORT_INTERVAL):
        report = (
            "üìä –û—Ç—á—ë—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –º–∏–Ω—É—Ç\n"
            f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
            f"üîé –ü—Ä–æ–≤–µ—Ä–æ–∫: {checks_count}\n"
            f"üÜï –ù–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {new_items_count}\n"
            "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç"
        )
        send_telegram_message(report)
        last_report_time = datetime.now()
        checks_count = 0
        new_items_count = 0

    time.sleep(current_check_interval)
