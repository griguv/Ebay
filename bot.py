import asyncio
import logging
import os
import re
from typing import List, Tuple

from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

from utils import logger, get_bot_token, COUNTRIES, is_supported_url, site_name, get_proxy_config
from price_parsers import get_prices_across_countries

# ----------------- –ö–û–ú–ê–ù–î–´ -----------------

HELP_TEXT = (
    "–ü—Ä–∏—à–ª–∏—Ç–µ 1 –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ç–æ–≤–∞—Ä—ã —Å Farfetch –∏–ª–∏ YOOX "
    "(–∫–∞–∂–¥—É—é —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª). –Ø —Å—Ä–∞–≤–Ω—é —Ü–µ–Ω—ã –ø–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º "
    f"—Å—Ç—Ä–∞–Ω–∞–º: {', '.join(COUNTRIES)}.\n\n"
    "–ï—Å–ª–∏ —Å—Å—ã–ª–æ–∫ –Ω–µ—Å–∫–æ–ª—å–∫–æ ‚Äî —Å—É–º–º—ã –ø–æ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–µ –±—É–¥—É—Ç –ø—Ä–æ—Å—É–º–º–∏—Ä–æ–≤–∞–Ω—ã –∏ –≤—ã–≤–µ–¥–µ–Ω—ã –∏—Ç–æ–≥–æ–º."
)

def extract_urls(text: str) -> List[str]:
    # –ø—Ä–æ—Å—Ç–∞—è –≤—ã–±–æ—Ä–∫–∞ —Å—Å—ã–ª–æ–∫
    urls = re.findall(r"https?://[^\s]+", text)
    # —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–¥ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –¥–æ–º–µ–Ω—ã
    return [u.strip(").,") for u in urls if is_supported_url(u)]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ì–æ—Ç–æ–≤ üöÄ\n" + HELP_TEXT
    )

async def countries(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω:\n" + ", ".join(COUNTRIES)
    )

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(HELP_TEXT)

# ----------------- –û–ë–†–ê–ë–û–¢–ö–ê –°–°–´–õ–û–ö -----------------

async def handle_links(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text or ""
    urls = extract_urls(text)

    if not urls:
        await update.message.reply_text("–ù–µ –Ω–∞—à—ë–ª –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Å—Å—ã–ª–æ–∫. –ù—É–∂–Ω—ã Farfetch –∏–ª–∏ YOOX.")
        return

    await update.message.reply_text(f"–ü—Ä–∏–Ω—è–ª {len(urls)} —Å—Å—ã–ª–æ–∫. –†–∞–±–æ—Ç–∞—é‚Ä¶")

    # —Å–æ–±–∏—Ä–∞–µ–º —Ü–µ–Ω—ã –ø–æ –≤—Å–µ–º —Å—Ç—Ä–∞–Ω–∞–º –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Å—ã–ª–∫–∏
    link_results = []
    for url in urls:
        try:
            prices = await get_prices_across_countries(url)
            link_results.append((url, prices))
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {url}: {e}")
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ {url}: {e}")
            return

    # –°—É–º–º–∏—Ä—É–µ–º –ø–æ —Å—Ç—Ä–∞–Ω–∞–º
    totals = {c: 0.0 for c in COUNTRIES}
    any_price_for_country = {c: False for c in COUNTRIES}
    lines = []

    for url, prices in link_results:
        name = site_name(url)
        lines.append(f"‚Äî [{name}] {url}")
        for c in COUNTRIES:
            info = prices.get(c, {})
            price = info.get("price")
            curr = info.get("currency")
            status = info.get("status", 0)
            if price is not None:
                any_price_for_country[c] = True
                totals[c] += float(price)
                lines.append(f"   {c}: {price:.2f} {curr or ''} (HTTP {status})")
            else:
                if status in (403, 429, 503, 0):
                    lines.append(f"   {c}: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ (–≤–æ–∑–º–æ–∂–Ω–æ CAPTCHA/–±–ª–æ–∫) (HTTP {status})")
                else:
                    lines.append(f"   {c}: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ü–µ–Ω—É (HTTP {status})")

    # –ò—Ç–æ–≥–∏
    lines.append("\n–ò–¢–û–ì–û –ø–æ —Å—Ç—Ä–∞–Ω–∞–º (—Å—É–º–º–∞ –ø–æ –≤—Å–µ–º —Å—Å—ã–ª–∫–∞–º):")
    for c in COUNTRIES:
        if any_price_for_country[c]:
            lines.append(f"   {c}: {totals[c]:.2f} (—Å—É–º–º–∞—Ä–Ω–æ; –≤–∞–ª—é—Ç–∞ –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –ø–æ —Å—Å—ã–ª–∫–∞–º)")
        else:
            lines.append(f"   {c}: ‚Äî")

    # Telegram –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏–π ‚Äî —Ä–∞–∑–æ–±—å—ë–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    output = "\n".join(lines)
    if len(output) < 3900:
        await update.message.reply_text(output)
    else:
        # —Ä–µ–∂–µ–º –Ω–∞ —á–∞—Å—Ç–∏
        chunks = []
        cur = []
        size = 0
        for line in lines:
            if size + len(line) + 1 > 3900:
                chunks.append("\n".join(cur))
                cur = [line]
                size = len(line) + 1
            else:
                cur.append(line)
                size += len(line) + 1
        if cur:
            chunks.append("\n".join(cur))
        for ch in chunks:
            await update.message.reply_text(ch)

# ----------------- MAIN -----------------

def build_application() -> Application:
    token = get_bot_token()

    # –ï—Å–ª–∏ –Ω—É–∂–µ–Ω –ø—Ä–æ–∫—Å–∏ –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ Telegram (—á–∞—â–µ –Ω–µ –Ω—É–∂–µ–Ω),
    # —Ç–æ –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è MTProto/HTTPS –ø—Ä–æ–∫—Å–∏
    # –í PTB21 –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Å–∞–º–æ–≥–æ Telegram –±–æ—Ç–∞ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Ç —á–µ—Ä–µ–∑ Request(..., proxy_url=...),
    # –Ω–æ –∑–¥–µ—Å—å –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤ –∫ —Å–∞–π—Ç–∞–º (price_parsers),
    # —Ç.–∫. Telegram API –æ–±—ã—á–Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –Ω–∞ Render.
    app = Application.builder().token(token).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("countries", countries))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_links))

    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
    async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
        logger.exception("Unhandled error: %s", context.error)

    app.add_error_handler(error_handler)

    return app

if __name__ == "__main__":
    # –í–ê–ñ–ù–û: –Ω–µ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º run_polling –≤ asyncio.run ‚Äî —ç—Ç–æ –∏ –≤—ã–∑—ã–≤–∞–ª–æ –æ—à–∏–±–∫–∏ —Å event loop.
    app = build_application()

    # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —É–¥–∞–ª—è–µ–º webhook –ø–µ—Ä–µ–¥ polling
    # (–µ—Å–ª–∏ —Ä–∞–Ω–µ–µ –±–æ—Ç –±—ã–ª –Ω–∞ –≤–µ–±—Ö—É–∫–∞—Ö)
    try:
        asyncio.get_event_loop().run_until_complete(app.bot.delete_webhook(drop_pending_updates=True))
        logger.info("Webhook —É–¥–∞–ª—ë–Ω –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º polling.")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å webhook: {e}")

    # –ï—Å–ª–∏ –≥–¥–µ-—Ç–æ —É–∂–µ –∫—Ä—É—Ç–∏—Ç—Å—è –¥—Ä—É–≥–æ–π polling ‚Äî Telegram –≤–µ—Ä–Ω—ë—Ç 409 Conflict.
    # –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –ø—Ä–æ—Å—Ç–æ —É–ø–∞–¥—ë–º —Å –ª–æ–≥–æ–º, —á—Ç–æ–±—ã –Ω–µ –ø–ª–æ–¥–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã.
    try:
        app.run_polling(allowed_updates=Update.ALL_TYPES, stop_signals=None, close_loop=False)
    except Exception as e:
        logger.exception(f"run_polling error: {e}")
        raise
