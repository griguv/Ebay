import os
import re
import asyncio
import logging
from bs4 import BeautifulSoup
import httpx
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(
    format="%(asctime)s %(levelname)s %(name)s: %(message)s",
    level=logging.INFO,
)
log = logging.getLogger("price-bot")

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
TOKEN = os.getenv("BOT_TOKEN", "–¢–û–ö–ï–ù_–¢–£–¢")  # —Ç–æ–∫–µ–Ω –±–µ—Ä—ë–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è Render
CHAT_ID = os.getenv("CHAT_ID", "")           # –∞–π–¥–∏ —á–∞—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
PROXY = os.getenv("PROXY")                   # –µ—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äì –∑–∞–¥–∞—ë–º –≤ Render

HEADERS = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
                  "AppleWebKit/537.36 (KHTML, like Gecko) "
                  "Chrome/124.0.0.0 Safari/537.36"
}

# --- HTTP –∫–ª–∏–µ–Ω—Ç ---
client_opts = {"headers": HEADERS, "timeout": 20.0}
if PROXY:
    client_opts["proxies"] = {"all://": PROXY}

http_client = httpx.AsyncClient(**client_opts)

# --- –ü–∞—Ä—Å–∏–Ω–≥ —Ü–µ–Ω—ã ---
def extract_price(soup: BeautifulSoup) -> str | None:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ü–µ–Ω—É —Å —Ä–∞–∑–Ω—ã—Ö —Å–∞–π—Ç–æ–≤."""
    text = soup.get_text(" ", strip=True)

    # Farfetch
    ff_price = soup.select_one("p[data-tstid='finalPrice']")
    if ff_price:
        return ff_price.get_text(strip=True)

    # eBay
    ebay_price = soup.select_one("#prcIsum, .x-price-approx__price, .x-price-approx")
    if ebay_price:
        return ebay_price.get_text(strip=True)

    # OutdoorDogSupply (In stock)
    if "in stock" in text.lower():
        return "In stock"

    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —Ü–∏—Ñ—Ä
    m = re.search(r"(\d[\d\s.,]*)(?:\$|USD|—Ä—É–±|‚ÇΩ|‚Ç¨)", text)
    if m:
        return m.group(0)

    return None

# --- –ö–æ–º–∞–Ω–¥—ã ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä, —è –ø—Ä–æ–≤–µ—Ä—é —Ü–µ–Ω—É.")

async def handle_url(update: Update, context: ContextTypes.DEFAULT_TYPE):
    url = update.message.text.strip()
    if not url.startswith("http"):
        await update.message.reply_text("‚ö†Ô∏è –≠—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞")
        return

    try:
        r = await http_client.get(url, follow_redirects=True)
        log.info("[DEBUG HTML %s] %s :: %s", r.status_code, url, r.text[:300])
        soup = BeautifulSoup(r.text, "html.parser")
        price = extract_price(soup)
        if price:
            await update.message.reply_text(f"üí∞ –¶–µ–Ω–∞: {price}")
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ü–µ–Ω—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.")
    except Exception as e:
        log.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ %s: %s", url, e)
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.")

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ---
async def main():
    app = Application.builder().token(TOKEN).build()

    try:
        await app.bot.delete_webhook(drop_pending_updates=False)
        log.info("Webhook —É–¥–∞–ª—ë–Ω –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º polling.")
    except Exception:
        pass

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_url))

    # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è PTB 21
    await app.initialize()
    await app.start()
    await app.updater.start_polling(allowed_updates=Update.ALL_TYPES)

    # –ó–∞–º–µ–Ω–µ–Ω–æ .wait() –Ω–∞ .idle()
    await app.updater.idle()

    await app.stop()
    await app.shutdown()
    await http_client.aclose()
    log.info("HTTP session closed.")

if __name__ == "__main__":
    asyncio.run(main())
