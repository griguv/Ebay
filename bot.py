import os
import asyncio
import logging
import httpx
from bs4 import BeautifulSoup
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger("price-bot")

# üîπ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("BOT_TOKEN")
CHAT_IDS = os.getenv("CHAT_ID", "").split(",")
PROXY_URL = os.getenv("PROXY_URL")  # https://ip:port@login:pass

if not TOKEN:
    raise RuntimeError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# üîπ HTTP –∫–ª–∏–µ–Ω—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä–æ–∫—Å–∏
client_args = {}
if PROXY_URL:
    client_args["proxies"] = PROXY_URL

client = httpx.AsyncClient(**client_args, timeout=30)

# –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
PRODUCT_URLS = [
    "https://www.farfetch.com/us/shopping/women/christopher-esber--item-31310073.aspx?storeid=10047",
    "https://www.ebay.com/itm/166907886162",
]

# üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã —Å —Å–∞–π—Ç–∞
async def fetch_price(url: str) -> str:
    try:
        resp = await client.get(url)
        resp.raise_for_status()
        logger.info("[DEBUG HTML %s] %s :: %s", resp.status_code, url, resp.text[:500])

        soup = BeautifulSoup(resp.text, "html.parser")

        # Farfetch
        price = soup.select_one("[data-tstid='priceInfo'] span")
        if price:
            return price.get_text(strip=True)

        # eBay
        ebay_price = soup.select_one("#prcIsum, .x-price-approx__price, .x-price-approx")
        if ebay_price:
            return ebay_price.get_text(strip=True)

        return "‚ùì –¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ %s: %s", url, e)
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}"

# üîπ –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–Ω üõí")

# üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
async def check_prices(app: Application):
    while True:
        for url in PRODUCT_URLS:
            price = await fetch_price(url)
            text = f"üîó {url}\nüí∞ {price}"
            for chat_id in CHAT_IDS:
                if chat_id.strip():
                    try:
                        await app.bot.send_message(chat_id=chat_id.strip(), text=text)
                    except Exception as e:
                        logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç %s: %s", chat_id, e)
        await asyncio.sleep(300)  # –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

# üîπ –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
async def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))

    # –£–±–∏—Ä–∞–µ–º –≤–µ–±—Ö—É–∫ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º polling
    await app.bot.delete_webhook()
    logger.info("Webhook —É–¥–∞–ª—ë–Ω –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º polling.")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω
    asyncio.create_task(check_prices(app))

    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
