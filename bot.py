import time
import random
import os
import cloudscraper
from bs4 import BeautifulSoup
from datetime import datetime, timedelta

# =============================
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
# =============================

EBAY_URLS = [
    "https://www.ebay.com/sch/i.html?_udlo=100&_nkw=garmin+astro+320+&_sacat=0&_stpos=19720&_fcid=1",
]

BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_IDS = os.getenv("CHAT_ID", "").split(",")
PROXIES = os.getenv("PROXIES", "").split(",")

CHECK_INTERVAL = 180          # –±–∞–∑–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (3 –º–∏–Ω)
REPORT_INTERVAL = 1800        # –æ—Ç—á—ë—Ç –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω
ERROR_NOTIFY_INTERVAL = 1800  # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –Ω–µ —á–∞—â–µ 30 –º–∏–Ω

seen_items = {url: set() for url in EBAY_URLS}
last_error_time = datetime.min
last_report_time = datetime.now()

checks_count = 0
new_items_count = 0
consecutive_errors = 0

HEADERS = {
    "User-Agent": ("Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
                   "AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122 Safari/537.36"),
    "Accept-Language": "en-US,en;q=0.9",
    "Accept-Encoding": "gzip, deflate, br",
    "Connection": "keep-alive"
}

# =============================
# –§—É–Ω–∫—Ü–∏–∏
# =============================

def get_scraper():
    """–°–æ–∑–¥–∞—ë—Ç scraper —Å —Å–ª—É—á–∞–π–Ω—ã–º –ø—Ä–æ–∫—Å–∏"""
    scraper = cloudscraper.create_scraper()
    if PROXIES:
        proxy = random.choice(PROXIES).strip()
        return scraper, {"http": proxy, "https": proxy}
    return scraper, None

def fetch_listings(url):
    scraper, proxy = get_scraper()
    resp = scraper.get(url, headers=HEADERS, proxies=proxy, timeout=20)
    resp.raise_for_status()

    soup = BeautifulSoup(resp.text, "html.parser")
    items = []

    for card in soup.select(".s-item"):
        title_tag = card.select_one(".s-item__title")
        price_tag = card.select_one(".s-item__price")
        link_tag = card.select_one(".s-item__link")

        if not title_tag or not price_tag or not link_tag:
            continue

        title = title_tag.get_text(strip=True)
        price = price_tag.get_text(strip=True)
        link = link_tag.get("href", "")
        item_id = link.split("/")[-1].split("?")[0] or link

        items.append({"id": item_id, "title": title, "price": price, "link": link})

    return items

def send_telegram_message(message):
    if not BOT_TOKEN:
        print("‚ö†Ô∏è BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")
        return
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    for raw_id in CHAT_IDS:
        chat_id = raw_id.strip()
        if not chat_id:
            continue
        try:
            import requests
            r = requests.post(url, data={"chat_id": chat_id, "text": message}, timeout=15)
            if r.status_code != 200:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ Telegram {chat_id}: {r.text}")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ Telegram ({chat_id}): {e}")

# =============================
# –ó–∞–ø—É—Å–∫
# =============================

print(f"üì¢ eBay –±–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ {CHECK_INTERVAL} —Å–µ–∫.")

for url in EBAY_URLS:
    try:
        listings = fetch_listings(url)
        for item in listings:
            seen_items[url].add(item["id"])
        print(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(listings)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å {url}")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ {url}: {e}")

while True:
    checks_count += 1
    try:
        for url in EBAY_URLS:
            try:
                listings = fetch_listings(url)
                for item in listings:
                    if item["id"] not in seen_items[url]:
                        seen_items[url].add(item["id"])
                        new_items_count += 1
                        send_telegram_message(
                            f"üÜï –ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–∞ eBay!\n"
                            f"üìå {item['title']}\n"
                            f"üí≤ {item['price']}\n"
                            f"üîó {item['link']}"
                        )
                consecutive_errors = 0  # —Å–±—Ä–æ—Å –æ—à–∏–±–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ

            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {url}: {e}")
                consecutive_errors += 1
                if datetime.now() - last_error_time > timedelta(seconds=ERROR_NOTIFY_INTERVAL):
                    send_telegram_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {url}: {e}")
                    last_error_time = datetime.now()

        # –û—Ç—á—ë—Ç
        if datetime.now() - last_report_time > timedelta(seconds=REPORT_INTERVAL):
            send_telegram_message(
                "üìä –û—Ç—á—ë—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –º–∏–Ω—É—Ç\n"
                f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
                f"üîé –ü—Ä–æ–≤–µ—Ä–æ–∫: {checks_count}\n"
                f"üÜï –ù–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {new_items_count}\n"
                "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç"
            )
            last_report_time = datetime.now()
            checks_count = 0
            new_items_count = 0

    except Exception as e:
        print(f"‚ö†Ô∏è –û–±—â–∞—è –æ—à–∏–±–∫–∞ —Ü–∏–∫–ª–∞: {e}")

    # –µ—Å–ª–∏ –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥ ‚Üí –≤—Ä–µ–º–µ–Ω–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–∞—É–∑—É
    if consecutive_errors >= 3:
        delay = CHECK_INTERVAL * 3
        print(f"‚ö†Ô∏è {consecutive_errors} –æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥. –ñ–¥—ë–º {delay} —Å–µ–∫.")
        time.sleep(delay)
    else:
        # –æ–±—ã—á–Ω–∞—è –ø–∞—É–∑–∞ —Å —Ä–∞–Ω–¥–æ–º–æ–º
        jitter = random.randint(-30, 30)
        delay = max(60, CHECK_INTERVAL + jitter)
        time.sleep(delay)
